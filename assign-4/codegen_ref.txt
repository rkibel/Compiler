.data

.globl g
g: .zero 8


.globl pt
pt: .zero 8


.globl ptf
ptf: .zero 8


.globl pts
pts: .zero 8


.globl returnArith_
returnArith_: .quad "returnArith"


.globl returnConst_
returnConst_: .quad "returnConst"


.globl returnLocal_
returnLocal_: .quad "returnLocal"


.globl returnParam_
returnParam_: .quad "returnParam"


out_of_bounds_msg: .string "out-of-bounds array access"
invalid_alloc_msg: .string "invalid allocation amount"
        
.text

.globl main
main:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp main_entry

main_entry:
  movq $1, %rax
  jmp main_epilogue

main_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl returnArith
returnArith:
  pushq %rbp
  movq %rsp, %rbp
  subq $16, %rsp
  movq $0, -8(%rbp)
  jmp returnArith_entry

returnArith_entry:
  movq $1, %r8
  addq $2, %r8
  movq %r8, -8(%rbp)
  movq -8(%rbp), %rax
  jmp returnArith_epilogue

returnArith_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl returnConst
returnConst:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp returnConst_entry

returnConst_entry:
  movq $1, %rax
  jmp returnConst_epilogue

returnConst_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl returnLocal
returnLocal:
  pushq %rbp
  movq %rsp, %rbp
  subq $16, %rsp
  movq $0, -8(%rbp)
  jmp returnLocal_entry

returnLocal_entry:
  movq -8(%rbp), %rax
  jmp returnLocal_epilogue

returnLocal_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl returnParam
returnParam:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp returnParam_entry

returnParam_entry:
  movq 16(%rbp), %rax
  jmp returnParam_epilogue

returnParam_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.out_of_bounds:
  lea out_of_bounds_msg(%rip), %rdi
  call _cflat_panic

.invalid_alloc_length:
  lea invalid_alloc_msg(%rip), %rdi
  call _cflat_panic
        
