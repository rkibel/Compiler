.data

.globl fun_
fun_: .quad "fun"


.globl fun2_
fun2_: .quad "fun2"


.globl fun3_
fun3_: .quad "fun3"


.globl g
g: .zero 8


.globl pt
pt: .zero 8


.globl ptf
ptf: .zero 8


.globl pts
pts: .zero 8


out_of_bounds_msg: .string "out-of-bounds array access"
invalid_alloc_msg: .string "invalid allocation amount"
        
.text

.globl fun
fun:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp fun_entry

fun_entry:
  movq $100, %rax
  jmp fun_epilogue

fun_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl fun2
fun2:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp fun2_entry

fun2_entry:
  movq $101, %rax
  jmp fun2_epilogue

fun2_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl fun3
fun3:
  pushq %rbp
  movq %rsp, %rbp
  subq $0, %rsp
  jmp fun3_entry

fun3_entry:
  movq $102, %rax
  jmp fun3_epilogue

fun3_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.globl main
main:
  pushq %rbp
  movq %rsp, %rbp
  subq $48, %rsp
  movq $0, -8(%rbp)
  movq $0, -16(%rbp)
  movq $0, -24(%rbp)
  movq $0, -32(%rbp)
  movq $0, -40(%rbp)
  jmp main_entry

main_entry:
  movq $11, -24(%rbp)
  movq $12, -32(%rbp)
  subq $8, %rsp
  pushq -40(%rbp)
  pushq $6
  pushq $5
  pushq -32(%rbp)
  pushq $3
  pushq $2
  pushq -24(%rbp)
  call fun
  addq $64, %rsp
  jmp main_lbl1

main_lbl1:
  movq $33, -24(%rbp)
  subq $8, %rsp
  pushq $1
  call fun2
  movq %rax, -8(%rbp)
  addq $16, %rsp
  jmp main_lbl2

main_lbl2:
  movq -8(%rbp), %r8
  movq %r8, -24(%rbp)
  movq $22, -24(%rbp)
  subq $8, %rsp
  pushq $3
  pushq $2
  pushq $1
  call fun3
  movq %rax, -16(%rbp)
  addq $32, %rsp
  jmp main_lbl3

main_lbl3:
  movq -16(%rbp), %r8
  movq %r8, -32(%rbp)
  movq $1, %rax
  jmp main_epilogue

main_epilogue:
  movq %rbp, %rsp
  popq %rbp
  ret

.out_of_bounds:
  lea out_of_bounds_msg(%rip), %rdi
  call _cflat_panic

.invalid_alloc_length:
  lea invalid_alloc_msg(%rip), %rdi
  call _cflat_panic
        
